# Defines user and group credentials used by worker processes. If group is
# omitted, a group whose name equals that of user is used.
user vagrant;

# The optimal value depends on many factors including (but not limited to) the
# number of CPU cores, the number of hard disk drives that store data, and load
# pattern. When one is in doubt, setting it to the number of available CPU
# cores would be a good start (the value “auto” will try to autodetect it).
worker_processes 1;

# Enables or disables the use of “just-in-time compilation” (PCRE JIT) for the
# regular expressions known by the time of configuration parsing.
pcre_jit on;

# Configures logging. Several logs can be specified on the same level. The
# first parameter defines a file that will store the log. The second parameter
# determines the level of logging.
error_log /var/log/nginx/error.log;

# Provides the configuration file context in which the directives that affect
# connection processing are specified.
events {
    # Sets the maximum number of simultaneous connections that can be opened by
    # a worker process.
    worker_connections 8096;

    # If accept_mutex is enabled, worker processes will accept new connections
    # by turn. Otherwise, all worker processes will be notified about new
    # connections, and if volume of new connections is low, some of the worker
    # processes may just waste system resources.
    accept_mutex on;

    # If multi_accept is disabled, a worker process will accept one new
    # connection at a time. Otherwise, a worker process will accept all new
    # connections at a time.
    multi_accept on;
}

# Provides the configuration file context in which the HTTP server directives
# are specified.
http {
    # Enables or disables the use of sendfile().
    sendfile on;

    # Enables or disables the use of the TCP_NOPUSH socket option on FreeBSD or
    # the TCP_CORK socket option on Linux. The options are enabled only when
    # sendfile is used.
    tcp_nopush on;

    # Enables or disables emitting nginx version in error messages and in the
    # “Server” response header field.
    server_tokens off;

    # If possible, the transmission of client data will be postponed until
    # nginx has at least size bytes of data to send.
    postpone_output 0;

    include mime.types;
    default_type text/plain;

    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_http_version 1.1;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript
        application/json application/x-javascript application/javascript
        application/xml application/xml+rss application/xhtml+xml application/rss+xml;

    log_format custom '$time_iso8601 $host $status "$request_method $request_uri" ${body_bytes_sent}b ${request_time}s $remote_addr';
    access_log /var/log/nginx/unspecified.log custom;
    error_log /var/log/nginx/unspecified.err;

    set_real_ip_from 127.0.0.1;
    real_ip_header X-Forwarded-For;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Nginx-Proxy true;

    upstream php-fpm {
        server unix:/run/php-fpm/php-fpm.sock;
    }

    server {
        listen 8080;
        server_name localhost default_server;
        access_log /var/log/nginx/app.log custom;
        error_log /var/log/nginx/app.err;
        root /srv/http/web;

        client_max_body_size 2m;

        location = /favicon.ico {
            return 444;
        }

        location / {
            index index.php;
            try_files $uri /index.php$is_args$args;
            include fastcgi.conf;
            fastcgi_split_path_info ^((?U).+\.php)(/?.+)$;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            fastcgi_pass php-fpm;
        }
    }
}
